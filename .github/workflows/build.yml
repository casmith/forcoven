# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Setup PHP with PECL extension
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
        extensions: pdo_mysql

    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: amd64,arm64

    - name: Login to DockerHub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # deploy to docker hub, only run on main branch
    - name: get version
      id: get_version
      if: github.ref == 'refs/heads/main'
      run: echo "next_version=$(printf '%(%Y.%m.%d.)T'; git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

    - name: Build and push
      id: docker_build
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v6
      with:
        file: Dockerfile
        push: true
        tags: casmith/forcoven:latest,casmith/forcoven:${{ steps.get_version.outputs.next_version }}
        platforms: linux/amd64,linux/arm64

    - name: Create Release
      id: create_release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ steps.get_version.outputs.next_version }}
        release_name: v${{ steps.get_version.outputs.next_version }}
